name: Fetch All Open Pull Request SHAs
on:
  push:
  workflow_dispatch:

jobs:
  fetch_all_pull_request_shas:
    runs-on: ubuntu-latest
    outputs:
      matrix_shas: ${{ steps.fetch_all_pull_requests.outputs.matrix_shas }}
    steps:
      - name: Fetch all opened pull request numbers and merge commit SHAs
        shell: bash
        id: fetch_all_pull_requests
        run: |
          pr_info=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/redhat-developer/lsp4ij/pulls?state=open&sort=created&direction=desc&per_page=100" \
          | jq -r '.[] | "\(.number) \(.merge_commit_sha)"')
          
          pr_merge_shas=() # Initialize an empty array
          while read -r pr; do
            pr_number=$(echo $pr | awk '{print $1}')
            pr_merge_sha=$(echo $pr | awk '{print $2}')
            if [ "$pr_merge_sha" != "null" ]; then
              pr_merge_shas+=("$pr_merge_sha") # Append merge SHA to the array if it's not null
            fi
          done <<< "$pr_info"
          
          if [ ${#pr_merge_shas[@]} -eq 0 ]; then
            echo "No open pull requests with merge commits found."
            matrix_shas="[]"
          else
            # Convert array to JSON format
            matrix_shas=$(printf '%s\n' "${pr_merge_shas[@]}" | jq -R . | jq -s .)
          fi
          
          echo "matrix_shas=$matrix_shas" >> $GITHUB_ENV
          echo "matrix_shas=$matrix_shas" >> $GITHUB_OUTPUT
          
  example_matrix:
    runs-on: ubuntu-latest
    needs: fetch_all_pull_request_shas
    strategy:
      matrix:
        merge-commit-sha: ${{ fromJson(needs.fetch_all_pull_request_shas.outputs.matrix_shas) }}
    steps:
      - name: Checkout pull request merge commits
        uses: actions/checkout@v3
        with:
          repository: redhat-developer/lsp4ij
          ref: ${{ matrix.merge-commit-sha }}
      - name: Print merge commit SHA
        run: echo "Processing merge commit SHA:${{ matrix.merge-commit-sha }}"
